"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { motion } from "framer-motion";
import { Stethoscope, User, Calendar, Download, Heart, Bot } from "lucide-react";
import { Button } from "@/components/ui/button";

interface PatientSummaryData {
  patient_name: string;
  doctor_name: string;
  summary: string;
  created_at: string;
  session_id: string;
}

export default function PatientSummaryPage() {
  const params = useParams();
  const sessionId = params.id as string;
  
  const [summaryData, setSummaryData] = useState<PatientSummaryData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [email, setEmail] = useState("");
  const [activatingAgent, setActivatingAgent] = useState(false);

  useEffect(() => {
    if (sessionId) {
      fetchSummaryData();
    }
  }, [sessionId]);

  const fetchSummaryData = async () => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/qr/summary/${sessionId}`);
      if (response.ok) {
        const data = await response.json();
        setSummaryData(data);
      } else if (response.status === 404) {
        setError("Your summary is being prepared. Please check back in a few minutes.");
      } else {
        setError("Summary not found or not available");
      }
    } catch (error) {
      console.error("Error fetching summary:", error);
      setError("Failed to load summary");
    } finally {
      setLoading(false);
    }
  };

  const downloadSummary = () => {
    if (!summaryData) return;
    
    const content = `
Medical Visit Summary
Patient: ${summaryData.patient_name}
Doctor: Dr. ${summaryData.doctor_name}
Date: ${new Date(summaryData.created_at).toLocaleDateString()}

${summaryData.summary}

---
Generated by Skribe - Smart Healthcare Dictation
    `.trim();
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `medical-summary-${summaryData.patient_name.replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  };

  const activateHealthAgent = async () => {
    if (!email) return;
    
    setActivatingAgent(true);
    try {
      const response = await fetch("https://agents.toolhouse.ai/a47f921e-bf65-48ca-a612-6b88c9516cd0", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: `
          Patient email: ${email}
          
          Results link: ${summaryData?.summary}
          
          Transcript: ${summaryData?.patient_name}`
        })
      });
      
      if (response.ok) {
        alert("Health Agent activated successfully!");
        setShowEmailModal(false);
        setEmail("");
      } else {
        alert("Failed to activate Health Agent. Please try again.");
      }
    } catch (error) {
      console.error("Error activating health agent:", error);
      alert("An error occurred. Please try again.");
    } finally {
      setActivatingAgent(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading your medical summary...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <Heart className="w-8 h-8 text-red-400" />
          </div>
          <h1 className="text-2xl font-bold text-white mb-2">Summary Not Available</h1>
          <p className="text-gray-400">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white font-dm-sans">
      {/* Background Effects - Softer for patient view */}
      <div className="absolute inset-0 bg-gradient-to-br from-purple-900/10 via-black to-blue-900/10"></div>
      <div className="absolute inset-0 opacity-10" style={{
        backgroundImage: `
          linear-gradient(30deg, rgba(147, 51, 234, 0.05) 1px, transparent 1px),
          linear-gradient(150deg, rgba(59, 130, 246, 0.05) 1px, transparent 1px)
        `,
        backgroundSize: '80px 80px'
      }}></div>

      {/* Header */}
      <header className="mt-10 relative z-10 border-b border-gray-800/30 backdrop-blur-xl">
        <div className="max-w-4xl mx-auto px-6 py-6">
          <div className="flex items-center justify-center">
            <div className="flex items-center gap-3">
             
              <div className="text-center">
                <h1 className="text-2xl font-bold ">Medical Summary</h1>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="relative z-10 max-w-4xl mx-auto px-6 py-8">
        {summaryData && (
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-8"
          >
            {/* Patient Info Card */}
            <div className="glass-dark rounded-2xl p-8 shadow-xl">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-500/20 to-blue-500/20 rounded-full flex items-center justify-center border border-purple-500/30">
                    <User className="w-8 h-8 text-purple-300" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-white">{summaryData.patient_name}</h2>
                    <p className="text-gray-400">Patient Summary</p>
                  </div>
                </div>
                
              
                 <Button 
                 onClick={downloadSummary}
                 className="bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white font-bold tracking-wide">
                 <Download className="w-4 h-4 mr-2" />
                  Download Summary
                </Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="bg-gray-800/30 rounded-lg p-4">
                  <p className="text-sm text-gray-400 mb-1">Healthcare Provider</p>
                  <p className="text-white font-semibold">Dr. {summaryData.doctor_name}</p>
                </div>
                
                <div className="bg-gray-800/30 rounded-lg p-4">
                  <p className="text-sm text-gray-400 mb-1">Visit Date</p>
                  <p className="text-white font-semibold flex items-center gap-2">
                    <Calendar className="w-4 h-4 text-purple-400" />
                    {new Date(summaryData.created_at).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </p>
                </div>
              </div>

              <div className="flex justify-center">
                <Button 
                  onClick={() => setShowEmailModal(true)}
                  className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold tracking-wide">
                  <Bot className="w-4 h-4 mr-2" />
                  Activate Health Agent
                </Button>
              </div>
            </div>

            {/* Summary Content */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="glass-dark rounded-2xl p-8 shadow-xl"
            >
              <h3 className="text-xl font-semibold text-white mb-6 flex items-center gap-2">
                <div className="w-6 h-6 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center">
                  <Heart className="w-3 h-3 text-white" />
                </div>
                Your Visit Summary
              </h3>
              
              <div className="prose prose-invert max-w-none">
                <div className="text-gray-200 leading-relaxed whitespace-pre-wrap text-lg">
                  {summaryData.summary}
                </div>
              </div>
            </motion.div>

            

        
          </motion.div>
        )}
      </div>

      {/* Email Modal */}
      {showEmailModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-gray-900 border border-gray-800 rounded-2xl p-6 max-w-md w-full mx-4"
          >
            <h3 className="text-xl font-bold text-white mb-4">Activate Health Agent</h3>
            <p className="text-gray-400 mb-6">Enter your email to activate your personal health agent</p>
            
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="your@email.com"
              className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 mb-6"
            />
            
            <div className="flex gap-3">
              <Button
                onClick={() => {
                  setShowEmailModal(false);
                  setEmail("");
                }}
                className="flex-1 bg-gray-800 hover:bg-gray-700 text-white"
              >
                Cancel
              </Button>
              <Button
                onClick={activateHealthAgent}
                disabled={!email || activatingAgent}
                className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white disabled:opacity-50"
              >
                {activatingAgent ? "Activating..." : "Activate"}
              </Button>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  );
}
